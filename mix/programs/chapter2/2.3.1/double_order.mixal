* Pre-order successor of tree
LTAG         EQU 1:1
RTAG         EQU 1:1
LLINK        EQU 2:3
RLINK        EQU 2:3
INFO1        EQU 4:5
INFO2        EQU 4:5

             ORIG 100
MAIN         JMP SETUPTREE
             JMP DBLORDER
             ENTA 1
             ENT1 NODEJ
             JMP DBL_SUCC
             JMP VISIT
             HLT

DBLORDER     STJ 9F
T1           LD1 TREE(LLINK)
             ENT2 STACK
T2           J1Z T4
T3           ENTA 1
             JMP VISIT
             ST1 0,2(4:5) 
             ENTX 1
             STX 0,2(1:1)
             INC2 2   * advance the stack
             LDX 0,1(LTAG)
             JXZ 1F
             ENT1 0
             JMP T2
1H           LD1 0,1(LLINK)
             JMP T2
T4           CMP2 =STACK=
             JE  9F
             LD1 -2,2(4:5) * read top of stack
             DEC2 2
T5           ENTA 2
             JMP VISIT
             LDX 1,1(RTAG)
             JXZ 2F
             ENT1 0
             JMP T2
2H           LD1 1,1(RLINK)
             JMP T2
9H           JMP *


* 1 is hte node
* A is the time
DBL_SUCC     STJ 9F
             CMPA =1=
             JE  1F 
             JMP INORDER_SUCC
             JMP 9F
1H           LDX 0,1(LTAG)
             JXZ S1
             LDX 1,1(RTAG)
             JXZ S1
             ENTA 2
             JMP 9F
S1           LDX 0,1(LTAG)
             JXP S2
             LD1 0,1(LLINK)
             JMP 9F
S2           CMPA =1= * account for in-order
             JNE 1F
             ENTA 2
             JMP 9F
1H           LDX 1,1(RTAG)
             LD1 1,1(RLINK)
             JXP S2
             JMP 9F
9H           JMP *


INORDER_SUCC STJ 9F
             LDX 1,1(RTAG)  * if we have a real right link
             JXNZ 1F            
             ENTA 1
1H           LD1 1,1(RLINK)
9H           JMP *

             
* Assumes I1 contains the node
* and A 1 has the count
VISIT        STJ 9F
             CHAR
             STX OUTBUF+1(4:5)
             LDA 0,1(INFO1)
             STA OUTBUF
             OUT OUTBUF(18)
9H           JMP *

SETUPTREE    STJ 9F
             ENTA NODEA
             STA  TREE(LLINK)
             ENTA NODEB
             STA  NODEA(LLINK)
             ENTA NODEC
             STA  NODEA+1(RLINK)
             ENTA NODED
             STA  NODEB(LLINK)
             ENTA NODEE
             STA  NODEC(LLINK)
             ENTA NODEF
             STA  NODEC+1(RLINK)
             ENTA NODEG
             STA  NODEE+1(RLINK)
             ENTA NODEH
             STA  NODEF(LLINK)
             ENTA NODEJ
             STA  NODEF+1(RLINK)

             ENTA 1
             STA NODEB+1(RTAG)
             STA NODED(LTAG)
             STA NODED+1(RTAG)
             STA NODEE(LTAG)
             STA NODEG(LTAG)
             STA NODEG+1(RTAG)
             STA NODEH(LTAG)
             STA NODEH+1(RTAG)
             STA NODEJ(LTAG)
             STA NODEJ+1(RTAG)

* set up threads
             ENTA TREE
             STA NODED(LLINK)
             STA NODEJ+1(RLINK)
             STA TREE+1(RLINK)

             ENTA NODEB
             STA NODED+1(RLINK)

             ENTA NODEA
             STA NODEB+1(RLINK)
             STA NODEE(LLINK)
             
             ENTA NODEC
             STA NODEG+1(RLINK)
             STA NODEH(LLINK)

             ENTA NODEE
             STA NODEG(LLINK)

             ENTA NODEF
             STA NODEH+1(RLINK)
             STA NODEJ(LLINK)

             
9H           JMP *

NODEA        CON 1
             CON 0
NODEB        CON 2
             CON 0
NODEC        CON 3
             CON 0
NODED        CON 4
             CON 0
NODEE        CON 5
             CON 0
NODEF        CON 6
             CON 0
NODEG        CON 7
             CON 0
NODEH        CON 8
             CON 0
NODEJ        CON 11 
             CON 0
TREE         CON 0
             CON 0
OUTBUF       ORIG *+24 
STACK        ORIG *+100
             END MAIN