 ORIG 100

* The way this program works:
* Every enter of a trace effectively pushes state onto a stack
* each entry with TBLSIZE words of data
*
* This data is things like registers, and custom code that is written
* each loop to handle special cases
*
* I2 tracks the stack in memory, incrementing by TBLSIZE each time
* we recurse into the self-trace
TBLSIZE EQU 25
START ENTX LEAVEX
      JMP  *+1
      JMP  ENTER

* Trace routine (from 1.4.3.2) - modified for a self trace
* X is leave location
* I2 must be zero


* Store all registers
ENTER      STX  VALUE_EXITLOC,2
           STX  VALUE_XREG,2
           ST1  VALUE_I1REG,2
           ST2  VALUE_I2REG,2
           STA  VALUE_AREG,2   * save for later
           STJ  VALUE_JREG,2   * save for later
           LDA  VALUE_JREG,2(0:2)
CYCLE      STA  VALUE_PREG,2
           SUB  VALUE_EXITLOC,2
           JAZ  LEAVE  * if we're zero, it means we are exactly the exit condition
           LD1  VALUE_PREG,2
           LDA  0,1
           STA  VALUE_INST+1,2
           SRA  2


*  save off instruction writing after a jump
* this is custom code to handle the right value of A
           STA  VALUE_INST1+1,2(0:3)
* set F to 2
           ENTA 2
           STA  VALUE_INST1+1,2(4:4)
* Set C to 48 (ENTA)
           ENTA 48
           STA  VALUE_INST1+1,2(5:5)  * Inst 1 is saved off (A,I) so that we can jump to it later if this is a jump
           LDA  INST1_TMPL+2
           STA  VALUE_INST1+2,2
           LDA  INST1_TMPL+3
           STA  VALUE_INST1+3,2
           LDA  INST1_TMPL
           STA  VALUE_INST1,2

* Write out instruction handling code
           LDA INST_TMPL
           STA VALUE_INST,2
           LDA INST_TMPL+2
           STA VALUE_INST+2,2
           LDA INST_TMPL+3
           STA VALUE_INST+3,2
           LDA INST_TMPL+4
           STA VALUE_INST+4,2

* we need to change the saving of instructions I2 and
* restoring of I2 to look at the properly indexed parts
           ENTA VALUE_I2REG,2
           STA  VALUE_INST+2,2(0:2)

           ENTA VALUE_I2SAVED,2
           STA  VALUE_INST+3,2(0:2)
           STA  VALUE_INST1+2,2(0:2)

*          check if in trace routine
           LDA  VALUE_PREG,2
           DECA ENTER
           JAN  6F     * we're after the trace routine (until end of memory)

           LDA VALUE_I2REG,2
           SUB  VALUE_I2REG-TBLSIZE,2    * check if previous value is the same
           JANZ 6F  * has not been filled out yet

           LDA VALUE_I2REG-TBLSIZE,2 * get previous value
           INCA TBLSIZE              * add table size
           STA VALUE_I2REG,2

6H         LDA  VALUE_INST+1,2(5:5)
           DECA 38    * check if its a jump instruction
           JANN 1F
           INCA 6
           JANZ 2F
           LDA  VALUE_INST+1,2(0:4) * is a stj instruction

* write out STJ instruction handling
           STA  VALUE_STJ+1,2(0:4)
           ENTA 24     * write out STA location
           STA  VALUE_STJ+1,2(5:5)
           LDA  STJ_TMPL
           STA  VALUE_STJ,2
           LDA  STJ_TMPL+2
           STA  VALUE_STJ+2,2
           LDA  STJ_TMPL+3
           STA  VALUE_STJ+3,2

           LDA  VALUE_JREG,2(0:2)
           JMP  VALUE_STJ,2
STJBACK    JMP  INCP * skip running intruction, we do the store jump manually
2H         DECA 2
           JANZ 2F
           JMP  3F
1H         DECA 9
           JAP  2F
3H         ENTA JUMPBACK
           SLA  1
           STA  VALUE_INST+1,2(0:3)
* clear out the I2 register load, we don't need it if we are jumping locally
           ENTA 0
           STA  VALUE_INST,2
2H         ST2  VALUE_I2SAVED,2
           LD1  VALUE_I1REG,2

           LDA  VALUE_AREG,2
           JMP  VALUE_INST,2   * jump to instruction

INSTBACK   ST1  VALUE_I1REG,2
           STA  VALUE_AREG,2

INCP       LDA  VALUE_PREG,2   * move to next instruction
           INCA 1
           JMP  CYCLE

8H         JSJ  JUMPBACK
JUMPBACK   LDA  8B(4:5) * just checking for JSJ instruction
           SUB  VALUE_INST+1,2(4:5)  * check if the instruction was a jsj
           JAZ  *+4
           LDA  VALUE_PREG,2
           INCA 1
           STA  VALUE_JREG,2(0:2)
INST1      JMP  VALUE_INST1,2   * this sets up the next instruction into A
INST1BACK  JMP  CYCLE


LEAVE      LDX  VALUE_XREG,2
           STX  LEAVEX(0:2)
           LDA  VALUE_AREG,2

           LD1  VALUE_I1REG,2
           LD2  VALUE_I2SAVED,2

LEAVEX     JMP  *

           END START
           ORIG 500

STJ_TMPL      LD2 VALUE_I2REG,2
              STA  *
              LD2 VALUE_I2SAVED * explicitly not indexed By I2
              JMP  STJBACK

* restore the j register, load A and I2 registers, and call the function
* Save off I2 registerf immediately, and then jump back to trace
INST_TMPL     LD2  VALUE_I2REG,2
INST_CALL     CON  0
              ST2  VALUE_I2REG  * explicitly not indexed by I2 (could be changed by inst)
              LD2  VALUE_I2SAVED  * explicitly not indexed by I2 (could be changed by inst)
              JMP  INSTBACK

*             INST_TMPL may have run ,so we assume that I2 is the actual value
JUMP_TMPL     CON  0
              LD2  VALUE_I2SAVED  * explicitly not indexed by I2 (could be changed by inst)
              JMP  JUMPBACK


INST1_TMPL    LD2  VALUE_I2REG,2
              ENTA  *
              LD2  VALUE_I2SAVED * explicitly not indexed by I2 ( could be changed by inst)
              JMP INST1BACK


              ORIG 1000
VALUE_AREG    CON  0
VALUE_XREG    CON  0
VALUE_I1REG   CON  0
VALUE_I2REG   CON  0
VALUE_I2SAVED CON  0
VALUE_PREG    CON  0
VALUE_JREG    CON  0
VALUE_EXITLOC CON  0

VALUE_INST1   CON  0
              CON  0
              CON  0
VALUE_INST1BK CON  0

VALUE_STJ     CON  0
              CON  0
              CON  0
VALUE_STJBCK  CON  0

* meant to represent an instruction call
VALUE_INST    CON  0
              CON  0
              CON  0
              CON  0
              CON  0
              CON  0
