* This program works by using a lookup table to determine the following
* Should we be looking for an address, should we be looking for a 8L+R F value,
* or Max F Value (or no restrictions).

MEM  EQU  200
     ORIG 100
MAIN JMP CHECK_F
     JMP CHECK_ADDR
     JMP GOOD
     HLT

* I1 = C
* I2 = Lookup table f-decision
* I3 = lookup table max f value
* A = f field of instruction
* I4 = modified throughout (temporary)
* Uses memory address 200 for temporary storage
CHECK_F    STJ  F_EXIT
           STZ  MEM
           LDA  INST(4:4)
           LD1  INST(5:5)
           LD2  LOOKUP,1(4:4)
*  I2 = 0, F is 8L+R
           J2Z   CHECK_LR
*  I2 = 1, F is bounded by MAX
           DEC2 1
           J2Z  CHECK_MAXF
*  I2 = !{0,1}, F is anything
           JMP  F_EXIT

CHECK_LR   SRAX 5 * move A into X
           ENT4 8
           ST4  MEM
           DIV  MEM    * divide by 8 A = L X = R
           ENT4 5
           ST4  MEM
           CMPA MEM
           JG   BAD    * A > 5
           CMPX MEM
           JG   BAD    * X > 5
           STX  MEM
           CMPA MEM
           JG   BAD    * A > A (L > R)
           JMP F_EXIT

CHECK_MAXF LD3  LOOKUP,1(5:5)
           ST3  MEM
           CMPA MEM
           JG   BAD * if A is greater than the value in the lookup table
F_EXIT     JMP  *

* I1 = C
* I2 = Lookup table A-decision
* I3 = I in instruction
* A = + or - AA in instruction
* uses MEM and I4 as a temporary storage
CHECK_ADDR   STJ A_EXIT
             LD1 INST(5:5)
             LD2 LOOKUP,1(3:3)
             LD3 INST(3:3)
             LDA INST(0:2)
             J2NZ A_EXIT * Leave function if A-decision is not zero
             ENT4 6
             ST4 MEM
             CMP3 MEM
             JG  BAD    * Bad if I > 6
             J3P A_EXIT * Leave function if I is > 0
             JAN BAD * Addresses can't be negative
             DECA 4096
             JAN BAD * Address can't be more than 4096
A_EXIT       JMP *

GOOD      STJ GOOD_EXIT
          OUT VALID(18)
GOOD_EXIT JMP *

* If we have a bad instruction, abort program
BAD  OUT INVALID(18)
     HLT

       ORIG 999
INST    CON 0

VALID   ALF  VALID
        ALF   INST
        ALF  RUCTI
        ALF  ON.
        ORIG 1100
INVALID ALF  INVAL
        ALF  ID IN
        ALF  STRUC
        ALF  TION.
* Lookup table for valid F
* If fourth byte is zero, look for adddress
* else if fourth byte is one, fifth byte specifies a max F value
* else fifth byte can be anything
* if third byte is a 0, then A,I should be an address
        ORIG 1200
LOOKUP  CON 0
        CON 0
        CON 0
        CON 0
        CON 0
        CON 4096+64+2
        CON 4096+64+5
        CON 128

        CON 0
        CON 0
        CON 0
        CON 0
        CON 0
        CON 0
        CON 0
        CON 0

        CON 0
        CON 0
        CON 0
        CON 0
        CON 0
        CON 0
        CON 0
        CON 0

        CON 0
        CON 0
        CON 64+20
        CON 4096+64+20
        CON 64+20
        CON 64+20
        CON 64+20
        CON 64+9

        CON 64+5
        CON 64+5
        CON 64+5
        CON 64+5
        CON 64+5
        CON 64+5
        CON 64+5
        CON 64+5

        CON 4096+64+4
        CON 4096+64+4
        CON 4096+64+4
        CON 4096+64+4
        CON 4096+64+4
        CON 4096+64+4
        CON 4096+64+4
        CON 4096+64+4

        CON 0
        CON 0
        CON 0
        CON 0
        CON 0
        CON 0
        CON 0
        CON 0
        END MAIN
