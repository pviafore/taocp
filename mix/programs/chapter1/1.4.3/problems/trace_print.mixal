 ORIG 100
START ENT1 12        * N for FAREY series
     ENTX STOP
     JMP  ENTER
     ENT2 0        * BUFFER
     ENTA 0        * numerator
     ENTX 1        * denominator
     JMP STORE_NUM
     ENTA 1        * numerator
     ST1  N
     LDX  N
     JMP STORE_NUM
* TEMP is N
     ENT3 0           * loop for as long as A and X are not 1/1 (numerator/denominator = Xn/Yn)
STOP ENT4 1
LOOP LDA  YBUFFER,3     * A = Yk
     ADD  N             * A = Yk + n
     SRAX 5
     DIV  YBUFFER,4     * A = (Yk + n)/Y(k+1)
     STA  YBUFFER,2
     MUL  XBUFFER,4     * A = A*X(k+1)
     SLAX 5
     SUB  XBUFFER,3     * A = A - Xk
     STA  XBUFFER,2
     LDA  YBUFFER,2     * A = (Yk + n)/Y(k+1) A
     MUL  YBUFFER,4     * A = A * YK+1
     SLAX 5
     SUB  YBUFFER,3     * A = A - Yk
     SRAX 5             * X = Yk+2
     LDA  XBUFFER,2      * A = xk+2
     INC3 1
     INC4 1
     JMP STORE_NUM
     CMPA =1=
     JNE  LOOP
     CMPX =1=
     JNE  LOOP

     JMP PRINT_NUMS
     HLT

* Assume that A is the numerator and X is the denominator
* I2 is the index into the buffer
STORE_NUM  STJ  SN_EXIT
           STA  XBUFFER,2
           STX  YBUFFER,2
           INC2 1
SN_EXIT    JMP  *

*I2 is the index into the buffer
PRINT_NUMS STJ  PN_EXIT
           ST2  TEMP
           ENT2 0
PN_LOOP    LDA XBUFFER,2
           CHAR
           STX BUFFER(1:2)
           ENTA 47            * slash
           STA BUFFER(3:3)
           LDA YBUFFER,2
           CHAR
           STX BUFFER(4:5)
           OUT BUFFER(18)
           INC2 1
           CMP2 TEMP
           JL   PN_LOOP
PN_EXIT    JMP  *

BUFFER  ALF    /
        ORIG *+24
XBUFFER ORIG *+100
YBUFFER ORIG *+100
TEMP    CON 0
N       CON 0

* Trace routine (from 1.4.3.2)
ENTER      STX  TEST(0:2)
           STX  LEAVEX(0:2)
           STA  AREG   * save for later
           STJ  JREG   * save for later
           LDA  JREG(0:2)
CYCLE      STA  PREG(0:2)
TEST       DECA *
           JAZ  LEAVE  * if we're zero, it means we are exactly the exit condition
PREG       LDA  *
           STA  INST
           SRA  2
           STA  INST1(0:3)
           LDA  INST(5:5)
           DECA 38    * check if its a jump instruction
           JANN 1F
           INCA 6
           JANZ 2F
           LDA  INST(0:4)
           STA  *+2(0:4)
JREG       ENTA *
           STA  *
           JMP  INCP
2H         DECA 2
           JANZ 2F
           JMP  3F
1H         DECA 9
           JAP  2F
3H         LDA  8F(0:3)
           STA  INST(0:3)
2H         LDA  AREG

           JMP  PRINT_TRACE
INST       NOP  *
           STA  AREG

INCP       LDA  PREG(0:2)
           INCA 1
           JMP  CYCLE
8H         JSJ  JUMP
JUMP       LDA  8B(4:5)
           SUB  INST(4:5)
           JAZ  *+4
           LDA  PREG(0:2)
           INCA 1
           STA  JREG(0:2)
INST1      ENTA *
           JMP  CYCLE
LEAVE      OUT  TAPE_BUFFER(0)
           IOC  0(0)
           LDA  AREG
LEAVEX     JMP  *
AREG       CON  0

PRINT_TRACE  STJ  PT_EXIT
             ST1  I1REG
             ST2  I2REG
             LD1  OFFSET
             LDA  PREG(0:2)
             SLA  1
             JG   1F
             JE   2F
             JMP  3F
1H           INCA 2
             JMP  3F
2H           INCA 1
3H           JNOV *+2
             JMP  4F
             INCA 8
4H           SLA  2
             ADD  JREG(0:2)
             STA  TAPE_BUFFER,1
             LDA  INST
             STA  TAPE_BUFFER+1,1
             LDA  AREG
             STA  TAPE_BUFFER+2,1
             ENT2 0,1
             ST2  TAPE_BUFFER+4,1
             LD1  I1REG
             ST1  TAPE_BUFFER+3,2
             ST3  TAPE_BUFFER+5,2
             ST4  TAPE_BUFFER+6,2
             ST5  TAPE_BUFFER+7,2
             ST6  TAPE_BUFFER+8,2
             STX  TAPE_BUFFER+9,2
             INC2 10
             CMP2 =100=
             JNE   RESTORE
             OUT  TAPE_BUFFER(0)
             ENT2 99            * zero out buffer
             STZ  TAPE_BUFFER,2(0)
             DEC2 1
             J2NN *-2
             ENT2 0
RESTORE      ST2  OFFSET
             LDA  AREG
             LD2  I2REG
PT_EXIT      JMP  *

TAPE_BUFFER  ORIG *+100
I1REG        CON  0
I2REG        CON  0
OFFSET       CON  0


           END START
